// @flow
import {Component} from 'react'
import * as Types from '../../../constants/types/chat'

export type PreMentionHocProps = {
  channelName: ?string,
  editingMessage: ?Types.Message,
  focusInputCounter: number,
  inputBlur: () => void,
  inputClear: () => void,
  inputFocus: () => void,
  inputSetRef: (r: any) => void,
  inputValue: () => string,
  isLoading: boolean,
  isPreview: boolean,
  onAttach: (inputs: Array<Types.AttachmentInput>) => void,
  onEditLastMessage: () => void,
  onEditMessage: (message: ?Types.Message, text: string) => void,
  onJoinChannel: () => void,
  onLeaveChannel: () => void,
  onPostMessage: (text: string) => void,
  onShowEditor: (message: ?Types.Message) => void,
  onStoreInputText: (text: string) => void,
  onUpdateTyping: (typing: boolean) => void,
  selectedConversationIDKey: ?Types.ConversationIDKey,
  setText: (text: string) => void,
  text: string,
  typing: Array<Types.Username>,
}

export type MentionHocCounters = {
  upArrowCounter: number,
  downArrowCounter: number,
  pickSelectedCounter: number,
}

export type MentionHocProps = {
  insertMention: (u: string, options?: {notUser: boolean}) => void,
  switchMention: (u: string) => void,
  insertChannelMention: (c: string, options?: {notChannel: boolean}) => void,
  switchChannelMention: (c: string) => void,
  onKeyDown: (e: SyntheticKeyboardEvent<>) => void,
  onKeyUp: (e: SyntheticKeyboardEvent<*>) => void,
  onEnterKeyDown: (e: SyntheticKeyboardEvent<>) => void,
  channelMentionFilter: string,
  channelMentionPopupOpen: boolean,
  setChannelMentionPopupOpen: (setOpen: boolean) => void,
  mentionFilter: string,
  mentionPopupOpen: boolean,
  setMentionPopupOpen: (setOpen: boolean) => void,
} & MentionHocCounters

export type Props = PreMentionHocProps & MentionHocProps

export default class Input extends Component<Props> {}
